=> 0x0000000000401010 <+0>:	sub    $0x18,%rsp                      # prologue
   0x0000000000401014 <+4>:	lea    0x8(%rsp),%rcx                  # (j) rcx = addr(M[0x8 + rsp]). Fourth arg.
   0x0000000000401019 <+9>:	lea    0xc(%rsp),%rdx                  # (i) rdx = addr(M[0xC + rsp]). Third arg.
   0x000000000040101e <+14>:	mov    $0x4027ed,%esi                  # esi = 0x4027ED ("%d %d")
   0x0000000000401023 <+19>:	mov    $0x0,%eax                       # eax = 0. Clear return value.
   0x0000000000401028 <+24>:	callq  0x400c10 <__isoc99_sscanf@plt>  # scan input (2 nums) into i and j
   0x000000000040102d <+29>:	cmp    $0x2,%eax                       # |->if (not(2 nums scanned)), then explode
   0x0000000000401030 <+32>:	jne    0x401039 <phase_4+41>           # |  else, then
   0x0000000000401032 <+34>:	cmpl   $0xe,0xc(%rsp)                  # |    if (i > 14), then explode
   0x0000000000401037 <+39>:	jbe    0x40103e <phase_4+46>           # |
   0x0000000000401039 <+41>:	callq  0x401574 <explode_bomb>         # |
   0x000000000040103e <+46>:	mov    $0xe,%edx                       # edx = 0xE
   0x0000000000401043 <+51>:	mov    $0x0,%esi                       # esi = 0x0
   0x0000000000401048 <+56>:	mov    0xc(%rsp),%edi                  # edi = M[0xC + rsp] = i
   0x000000000040104c <+60>:	callq  0x400fd2 <func4>                # eax = func4(i, 0, 14)
   0x0000000000401051 <+65>:	cmp    $0x3,%eax                       # |-> if (0x3 != eax), then explode bomb
   0x0000000000401054 <+68>:	jne    0x40105d <phase_4+77>           # |   else, then
   0x0000000000401056 <+70>:	cmpl   $0x3,0x8(%rsp)                  # |     if (0x3 != j), then explode
   0x000000000040105b <+75>:	je     0x401062 <phase_4+82>           # |     else, then pass phase 4
   0x000000000040105d <+77>:	callq  0x401574 <explode_bomb>         # |
   0x0000000000401062 <+82>:	add    $0x18,%rsp                      # epilogue
   0x0000000000401066 <+86>:	retq   


# some kind of binary search
Dump of assembler code for function func4:
=> 0x0000000000400fd2 <+0>:	sub    $0x8,%rsp              # prologue
   0x0000000000400fd6 <+4>:	mov    %edx,%eax              # eax = edx (lower 32b of third arg)
   0x0000000000400fd8 <+6>:	sub    %esi,%eax              # eax -= esi (lower 32b of second arg)
   0x0000000000400fda <+8>:	mov    %eax,%ecx              # ecx = eax
   0x0000000000400fdc <+10>:	shr    $0x1f,%ecx           ? # ecx = ecx >> 0x1F (31)
   0x0000000000400fdf <+13>:	add    %ecx,%eax              # eax += ecx
   0x0000000000400fe1 <+15>:	sar    %eax                 ? # eax >> 1
   0x0000000000400fe3 <+17>:	lea    (%rax,%rsi,1),%ecx     # ecx = addr(M[rsi + rax])
   0x0000000000400fe6 <+20>:	cmp    %edi,%ecx              # |-> if(edi >= ecx), then goto L1
   0x0000000000400fe8 <+22>:	jle    0x400ff6 <func4+36>    # |
   0x0000000000400fea <+24>:	lea    -0x1(%rcx),%edx        # |
   0x0000000000400fed <+27>:	callq  0x400fd2 <func4>       # |
   0x0000000000400ff2 <+32>:	add    %eax,%eax              # |
   0x0000000000400ff4 <+34>:	jmp    0x40100b <func4+57>    # |
L1:
   0x0000000000400ff6 <+36>:	mov    $0x0,%eax
   0x0000000000400ffb <+41>:	cmp    %edi,%ecx
   0x0000000000400ffd <+43>:	jge    0x40100b <func4+57>
   0x0000000000400fff <+45>:	lea    0x1(%rcx),%esi
   0x0000000000401002 <+48>:	callq  0x400fd2 <func4>
   0x0000000000401007 <+53>:	lea    0x1(%rax,%rax,1),%eax  #
L2:
   0x000000000040100b <+57>:	add    $0x8,%rsp
   0x000000000040100f <+61>:	retq  
